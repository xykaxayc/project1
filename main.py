#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ Marzban
–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""

import os
import sys
import logging
import asyncio
import signal
from logging.handlers import RotatingFileHandler
from typing import Optional
from dotenv import load_dotenv

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from database_manager import DatabaseManager
from marzban_api import MarzbanAPI
from bot_coordinator import BotCoordinator
from config import get_config
from plans import PLANS
from payment_methods import PAYMENT_METHODS
from messages import MESSAGES
from enums import UserStatus, PaymentMethod, UserRole
from texts import get_text

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = get_config()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
shutdown_event = asyncio.Event()

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('logs', exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatter = logging.Formatter(config.LOGGING['format'])
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    console_handler.setLevel(logging.INFO)
    
    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    file_handler = RotatingFileHandler(
        f"logs/{config.LOGGING['file']}",
        maxBytes=config.LOGGING['max_bytes'],
        backupCount=config.LOGGING['backup_count'],
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)
    file_handler.setLevel(logging.DEBUG)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=getattr(logging, config.LOGGING['level']),
        handlers=[console_handler, file_handler]
    )
    
    # –°–Ω–∏–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è httpx (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤)
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('telegram').setLevel(logging.INFO)

class PaymentBot:
    """–ö–ª–∞—Å—Å –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    config: object
    db_manager: Optional[DatabaseManager]
    marzban_api: Optional[MarzbanAPI]
    coordinator: Optional[BotCoordinator]
    application: Optional[Application]
    
    def __init__(self) -> None:
        self.config = config
        self.db_manager = None
        self.marzban_api = None
        self.coordinator = None
        self.application = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
        logger = logging.getLogger(__name__)
        
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not self.config.validate():
            logger.error("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            self.db_manager = DatabaseManager(self.config.DATABASE_PATH)
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Marzban API
        try:
            self.marzban_api = MarzbanAPI(
                self.config.MARZBAN_URL,
                self.config.MARZBAN_USERNAME, 
                self.config.MARZBAN_PASSWORD
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not self.marzban_api.authenticate():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Marzban")
                return False
                
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Marzban —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Marzban API: {e}")
            return False
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞
        await self._auto_import_users()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.coordinator = BotCoordinator(self.db_manager, self.marzban_api)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
        self.application = Application.builder().token(self.config.TELEGRAM_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self._register_handlers()
        
        logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    
    async def _auto_import_users(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–∂–¥—É Marzban –∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        logger = logging.getLogger(__name__)
        try:
            stats = self.db_manager.get_statistics()
            total_users = stats['total_users']
        except Exception:
            total_users = 0

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Marzban
        marzban_users = self.marzban_api.get_all_users() or []
        marzban_usernames = set(user.get('username') for user in marzban_users if user.get('username'))

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
        conn = self.db_manager
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
        local_usernames = set()
        try:
            import sqlite3
            db = sqlite3.connect(self.config.DATABASE_PATH)
            cursor = db.cursor()
            cursor.execute('SELECT marzban_username FROM user_telegram_mapping')
            local_usernames = set(row[0] for row in cursor.fetchall())
            db.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã: {e}")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Marzban
        added_count = 0
        for user in marzban_users:
            username = user.get('username')
            status = user.get('status', 'active')
            if username and username not in local_usernames:
                if self.db_manager.add_user(username, status, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–∑ Marzban"):
                    added_count += 1
                    logger.debug(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ Marzban
        removed_count = 0
        for username in local_usernames:
            if username not in marzban_usernames:
                if self.db_manager.delete_user_by_username(username):
                    removed_count += 1
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –≤ Marzban: {username}")

        logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}, —É–¥–∞–ª–µ–Ω–æ: {removed_count}")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.coordinator.start_command))
        self.application.add_handler(CommandHandler("status", self.coordinator.status_command))
        self.application.add_handler(CommandHandler("my_id", self.coordinator.my_id_command))
        self.application.add_handler(CommandHandler("help", self.coordinator.help_command))
        self.application.add_handler(CommandHandler("my_accounts", self.coordinator.my_accounts_command))
        self.application.add_handler(CommandHandler("choose_account", self.coordinator.choose_account_command))
        
        # –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        self.application.add_handler(CommandHandler("subscription", self.coordinator.subscription_command))
        self.application.add_handler(CommandHandler("sub", self.coordinator.subscription_command))  # –ö–æ—Ä–æ—Ç–∫–∏–π –∞–ª–∏–∞—Å
        self.application.add_handler(CommandHandler("test_subscription", self.coordinator.test_subscription_command))
        self.application.add_handler(CommandHandler("diagnose_subscription", self.coordinator.diagnose_subscription_command))
        self.application.add_handler(CommandHandler("fix_subscription", self.coordinator.fix_subscription_command))
        self.application.add_handler(CommandHandler("quick_fix", self.coordinator.quick_fix_command))
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("admin_links", self.coordinator.admin_links_command))
        self.application.add_handler(CommandHandler("stats", self.coordinator.stats_command))
        self.application.add_handler(CommandHandler("user_info", self.coordinator.user_info_command))
        self.application.add_handler(CommandHandler("pending", self.coordinator.pending_payments_command))
        self.application.add_handler(CommandHandler("new_users", self.coordinator.new_users_command))
        self.application.add_handler(CommandHandler("delete_user", self.coordinator.delete_user_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        self.application.add_handler(CommandHandler("confirm_payment", self.coordinator.confirm_payment_command))
        self.application.add_handler(CommandHandler("approve", self.coordinator.approve_payment_command))
        self.application.add_handler(CommandHandler("reject", self.coordinator.reject_payment_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (—Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã)
        self.application.add_handler(MessageHandler(filters.PHOTO, self.coordinator.handle_receipt_upload))
        self.application.add_handler(MessageHandler(filters.Document.ALL, self.coordinator.handle_receipt_upload))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.coordinator.handle_text_messages))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.coordinator.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.coordinator.error_handler)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger = logging.getLogger(__name__)
        
        if not await self.initialize():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
            return
        
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await self.application.bot.get_me()
        logger.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username} ({bot_info.first_name})")
        logger.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {self.config.ADMIN_IDS}")
        logger.info(f"üè† Marzban URL: {self.config.MARZBAN_URL}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç
        bot_link = f"https://t.me/{bot_info.username}"
        logger.info(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: {bot_link}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º start_polling –≤–º–µ—Å—Ç–æ run_polling –¥–ª—è macOS
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling...")
            
            async with self.application:
                await self.application.start()
                await self.application.updater.start_polling(
                    allowed_updates=['message', 'callback_query'],
                    drop_pending_updates=True
                )
                
                logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
                
                # –ñ–¥–µ–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                try:
                    await shutdown_event.wait()  # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                except asyncio.CancelledError:
                    pass
                    
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        finally:
            logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            try:
                if hasattr(self.application, 'updater') and self.application.updater.running:
                    await self.application.updater.stop()
                if self.application.running:
                    await self.application.stop()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger = logging.getLogger(__name__)
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def print_banner():
    """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    print(get_text("banner"))

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print(get_text("messages/BOT_STOPPED", signum=signum))
    shutdown_event.set()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    logger = logging.getLogger(__name__)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Marzban Payment Bot v2.0 (–º–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = PaymentBot()
    await bot.run()

if __name__ == "__main__":
    # –î–ª—è macOS –∏ Windows - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å event loop
    if sys.platform.startswith('win') or sys.platform == 'darwin':
        if sys.version_info >= (3, 8):
            try:
                # –î–ª—è Python 3.8+ –Ω–∞ macOS
                import uvloop
                asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
            except ImportError:
                # –ï—Å–ª–∏ uvloop –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É
                asyncio.set_event_loop_policy(asyncio.DefaultEventLoopPolicy())
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)