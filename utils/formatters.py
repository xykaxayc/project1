from datetime import datetime
from telegram import InlineKeyboardButton
from typing import Dict, List, Any, Optional
import html
import logging
from texts import TextManager, get_json

def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤"""
    if text is None:
        return ""
    return html.escape(str(text))

def format_welcome_message(first_name: str, user: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ HTML-—Ç–µ–≥–æ–≤)"""
    safe_name = escape_html(first_name)
    safe_username = escape_html(user['marzban_username'])
    status = '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if user.get('is_verified') else '‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω'
    
    return get_json("formatters.status_messages")["welcome_message"].format(
        first_name=safe_name,
        username=safe_username,
        status=status
    )

def format_status_message(stats: Dict, username: str, marzban_api) -> tuple:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not stats:
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", []
    
    messages = get_json("formatters/status_messages.json")
    safe_username = escape_html(username)
    status = escape_html(stats.get('status', 'unknown')).upper()
    
    message = messages["status_header"]
    message += messages["user_info"].format(
        username=safe_username,
        status_emoji=_get_status_emoji(stats['status']),
        status=status
    )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ
    if stats['data_limit_bytes'] > 0:
        used_gb = stats['used_traffic_gb']
        limit_gb = stats['data_limit_gb']
        percentage = stats['traffic_percentage']
        message += messages["traffic_info"]["limited"].format(
            used_gb=f"{used_gb:.2f}",
            limit_gb=f"{limit_gb:.1f}",
            percentage=f"{percentage:.1f}",
            progress_bar=_get_progress_bar(percentage)
        )
    else:
        message += messages["traffic_info"]["unlimited"].format(
            used_gb=f"{stats['used_traffic_gb']:.2f}"
        )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è
    if stats['expire_timestamp']:
        expire_date = datetime.fromtimestamp(stats['expire_timestamp'])
        formatted_date = expire_date.strftime('%d.%m.%Y')
        
        if stats['is_expired']:
            message += messages["subscription_info"]["expired"].format(expire_date=formatted_date)
        else:
            days_left = stats['days_remaining']
            message_key = "active_warning" if days_left <= 3 else "active_normal"
            message += messages["subscription_info"][message_key].format(
                expire_date=formatted_date,
                days_left=days_left
            )
    else:
        message += messages["subscription_info"]["unlimited"]
    
    # –ö–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status")],
        [InlineKeyboardButton("üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"get_subscription_{username}")],
        [InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="payment")],
        [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    return message, keyboard

def format_user_info_message(user: Dict, stats: Dict, marzban_api) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (MarkdownV2, –±–µ–∑ HTML)"""
    def esc(text):
        if not text:
            return '-'
        return str(text).replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')

    safe_username = esc(user['marzban_username'])
    message = f"üë§ *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï*\n\n"
    message += f"üîê Username: `{safe_username}`\n"
    if user.get('telegram_id'):
        message += f"üì± Telegram ID: `{esc(user['telegram_id'])}`\n"
    if user.get('telegram_username'):
        message += f"üì± Telegram: @{esc(user['telegram_username'])}\n"
    reg_date = esc(user.get('registration_date', 'N/A'))
    message += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg_date}\n"
    message += f"‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if user.get('is_verified') else '–ù–µ—Ç'}\n\n"
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ Marzban
    if stats:
        status = esc(stats.get('status', 'unknown')).upper()
        message += f"üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê MARZBAN:*\n"
        message += f"üìà –°—Ç–∞—Ç—É—Å: {status}\n"
        # –¢—Ä–∞—Ñ–∏–∫
        if stats['data_limit_bytes'] > 0:
            message += f"üìä –¢—Ä–∞—Ñ–∏–∫: {stats['used_traffic_gb']:.2f}/{stats['data_limit_gb']:.1f} –ì–ë ({stats['traffic_percentage']:.1f}%)\n"
        else:
            message += f"üìä –¢—Ä–∞—Ñ–∏–∫: {stats['used_traffic_gb']:.2f} –ì–ë (–±–µ–∑–ª–∏–º–∏—Ç)\n"
        # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if stats['expire_timestamp']:
            expire_date = datetime.fromtimestamp(stats['expire_timestamp'])
            formatted_date = expire_date.strftime('%d\.%m\.%Y')
            status_text = "‚ùå –ò—Å—Ç–µ–∫–ª–∞" if stats['is_expired'] else f"‚úÖ {stats['days_remaining']} –¥–Ω–µ–π"
            message += f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞: {status_text} (–¥–æ {formatted_date})\n"
        else:
            message += f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞: –ë–µ—Å—Å—Ä–æ—á–Ω–∞—è\n"
    else:
        message += f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Marzban\n"
    # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
    if user.get('notes'):
        safe_notes = esc(user['notes'])
        message += f"\nüìù *–ü–†–ò–ú–ï–ß–ê–ù–ò–Ø:*\n{safe_notes}\n"
    # –ü–ª–∞—Ç–µ–∂–∏
    payments = user.get('payments')
    if payments:
        message += "\nüí∞ *–ü–û–°–õ–ï–î–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ò:*\n"
        for p in payments:
            # p = {'date': ..., 'amount': ..., 'status': ..., 'time': ...}
            pay_date = esc(p.get('date', '-'))
            pay_time = esc(p.get('time', '-'))
            pay_amount = esc(p.get('amount', '-'))
            pay_status = esc(p.get('status', '-'))
            # –ï—Å–ª–∏ time –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ date (–µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å –≤—Ä–µ–º—è)
            if pay_time == '-' and pay_date != '-':
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                try:
                    dt = datetime.fromisoformat(p['date'])
                    pay_date = dt.strftime('%d.%m.%Y')
                    pay_time = dt.strftime('%H:%M')
                except Exception:
                    pass
            message += f"‚Ä¢ {pay_date} {pay_time}: {pay_amount} —Ä—É–±. ({pay_status})\n"
    return message

def format_statistics_message(stats: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã (–±–µ–∑ HTML-—Ç–µ–≥–æ–≤)"""
    message = f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´\n\n"
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    message += f"üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n"
    message += f"–í—Å–µ–≥–æ: {stats.get('total_users', 0)}\n"
    message += f"–°–≤—è–∑–∞–Ω–Ω—ã—Ö —Å Telegram: {stats.get('linked_users', 0)}\n"
    message += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_users', 0)}\n"
    message += f"–ù–æ–≤—ã—Ö –∑–∞ 24—á: {stats.get('new_users_24h', 0)}\n\n"
    
    # –ü–ª–∞—Ç–µ–∂–∏
    message += f"üí∞ –ü–õ–ê–¢–ï–ñ–ò:\n"
    message += f"–û–∂–∏–¥–∞—é—â–∏—Ö: {stats.get('pending_payments', 0)}\n"
    message += f"–û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats.get('approved_today', 0)}\n"
    message += f"–î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {stats.get('monthly_revenue', 0)} —Ä—É–±.\n\n"
    
    # –°–∏—Å—Ç–µ–º–∞
    message += f"‚öôÔ∏è –°–ò–°–¢–ï–ú–ê:\n"
    uptime = stats.get('uptime', 'N/A')
    message += f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n"
    
    current_time = datetime.now().strftime('%d.%m.%Y %H:%M')
    message += f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {current_time}"
    
    return message

def format_pending_payments_message(requests: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ (–±–µ–∑ HTML-—Ç–µ–≥–æ–≤)"""
    if not requests:
        return "‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É."
    
    message = f"üí∞ –û–ñ–ò–î–ê–Æ–©–ò–ï –ó–ê–Ø–í–ö–ò ({len(requests)}):\n\n"
    
    for req in requests[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –∑–∞—è–≤–æ–∫
        created_date = datetime.fromisoformat(req['created_at']).strftime('%d.%m %H:%M')
        safe_username = escape_html(req['marzban_username'])
        safe_plan_id = escape_html(req['plan_id'])
        
        message += f"üÜî –ó–∞—è–≤–∫–∞ #{req['id']}\n"
        message += f"üë§ {safe_username}\n"
        message += f"üí∞ {req['amount']} —Ä—É–±. ({safe_plan_id})\n"
        message += f"üìÖ {created_date}\n"
        message += f"üìé –ß–µ–∫: {'‚úÖ' if req.get('receipt_file_id') else '‚ùå'}\n"
        message += f"/approve {req['id']} | /reject {req['id']} –ø—Ä–∏—á–∏–Ω–∞\n\n"
    
    if len(requests) > 10:
        message += f"... –∏ –µ—â–µ {len(requests) - 10} –∑–∞—è–≤–æ–∫\n"
    
    return message

def format_admin_notification(username: str, telegram_id: int, telegram_username: str, trial_days: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    safe_username = escape_html(username)
    current_time = datetime.now().strftime('%d.%m.%Y %H:%M')
    
    message = f"üÜï <b>–ù–û–í–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø</b>\n\n"
    message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{safe_username}</code>\n"
    
    if telegram_username:
        safe_tg_username = escape_html(telegram_username)
        message += f"üì± Telegram: @{safe_tg_username} (ID: {telegram_id})\n"
    else:
        message += f"üì± Telegram ID: {telegram_id}\n"
    
    message += f"üìÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {trial_days} –¥–Ω–µ–π\n"
    message += f"üïê –í—Ä–µ–º—è: {current_time}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    message += f"üîß <b>–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
    message += f"<code>/user_info {username}</code> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
    message += f"<code>/test_subscription {username}</code> - —Ç–µ—Å—Ç —Å—Å—ã–ª–∫–∏\n"
    message += f"<code>/subscription {username}</code> - –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É"
    
    return message

def _get_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    status_map = {
        'active': '‚úÖ',
        'disabled': '‚ùå',
        'expired': 'üö´',
        'limited': '‚ö†Ô∏è'
    }
    return status_map.get(status.lower(), '‚ùì')

def _get_progress_bar(percentage: float, length: int = 10) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    filled = int(percentage / 100 * length)
    empty = length - filled
    
    if percentage >= 90:
        bar = 'üî¥' * filled + '‚ö™' * empty
    elif percentage >= 70:
        bar = 'üü°' * filled + '‚ö™' * empty
    else:
        bar = 'üü¢' * filled + '‚ö™' * empty
    
    return f"{bar} {percentage:.1f}%"

def format_connection_info_message(username: str, connection_info: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    safe_username = escape_html(username)
    
    message = f"üîó <b>–î–ê–ù–ù–´–ï –î–õ–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø</b>\n\n"
    message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{safe_username}</code>\n"
    
    if connection_info.get('status'):
        status = escape_html(connection_info['status']).upper()
        message += f"üìä –°—Ç–∞—Ç—É—Å: {_get_status_emoji(connection_info['status'])} {status}\n"
    
    if connection_info.get('protocols'):
        protocols_text = ', '.join(connection_info['protocols'])
        message += f"üîß –ü—Ä–æ—Ç–æ–∫–æ–ª—ã: {protocols_text}\n"
    
    message += "\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if connection_info.get('subscription_url'):
        safe_url = escape_html(connection_info['subscription_url'])
        message += f"üìã <b>–°—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n<code>{safe_url}</code>\n\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    if connection_info.get('clash_url'):
        safe_clash_url = escape_html(connection_info['clash_url'])
        message += f"‚ö° <b>–î–ª—è Clash:</b>\n<code>{safe_clash_url}</code>\n\n"
    
    if connection_info.get('v2ray_url'):
        safe_v2ray_url = escape_html(connection_info['v2ray_url'])
        message += f"üöÄ <b>–î–ª—è V2Ray:</b>\n<code>{safe_v2ray_url}</code>\n\n"
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    message += f"üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
    message += f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã—à–µ\n"
    message += f"2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à–µ VPN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
    message += f"3. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–ü–æ–¥–ø–∏—Å–∫–∏' –∏–ª–∏ 'Import'\n"
    message += f"4. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä—ã\n"
    message += f"5. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å!"
    
    return message

def determine_user_status(user_data: dict) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Marzban"""
    if not user_data.get('status') == 'active':
        return '–û—Ç–∫–ª—é—á–µ–Ω'
    expire_timestamp = user_data.get('expire')
    if expire_timestamp:
        expire_date = datetime.fromtimestamp(expire_timestamp)
        if expire_date < datetime.now():
            return '–ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è'
    data_limit = user_data.get('data_limit', 0)
    used_traffic = user_data.get('used_traffic', 0)
    if data_limit and used_traffic >= data_limit:
        return '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞'
    return '–ê–∫—Ç–∏–≤–µ–Ω'

def format_timestamp(timestamp: Optional[int]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏"""
    formats = get_json("formatters/datetime_formats.json")["timestamp_formats"]
    
    if not timestamp:
        return formats["not_set"]
    try:
        dt = datetime.fromtimestamp(timestamp)
        return dt.strftime(formats["default"])
    except Exception:
        return formats["invalid"]

def format_bytes(bytes_value: Optional[int]) -> str:
    if not bytes_value:
        return '0 B'
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if bytes_value < 1024:
            return f"{bytes_value:.2f} {unit}"
        bytes_value /= 1024
    return f"{bytes_value:.2f} PB"

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def format_payment_plans_message() -> tuple:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–ª–∞–Ω–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PaymentHandlers.show_payment_plans()", []

def format_payment_details_message(plan: Dict, user: Dict) -> tuple:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–ª–∞—Ç–µ–∂–∞"""
    return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PaymentHandlers.process_payment_plan()", []

def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Telegram MarkdownV2.
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
    """
    if text is None:
        return "-"
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞
    text = str(text)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω! –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à, –∑–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = text.replace('\\', '\\\\')  # –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∞–º —Å–ª—ç—à
    
    # –í—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2
    special_chars = '_*[]()~`>#+-=|{}.!'
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    
    return text