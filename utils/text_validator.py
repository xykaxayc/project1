"""
–ú–æ–¥—É–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ.
–ü–æ–º–æ–≥–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –∂—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É–µ—Ç –≤—ã–Ω–µ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã.
"""

import os
import ast
import re
from typing import List, Tuple, Set

def should_ignore_string(text: str, node: ast.AST) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ.
    
    Args:
        text: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        node: AST —É–∑–µ–ª —Å—Ç—Ä–æ–∫–∏
    """
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º docstrings
    if isinstance(node.parent, (ast.Module, ast.ClassDef, ast.FunctionDef)):
        return True
        
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏
    if 'log' in text.lower() or text.startswith(('DEBUG:', 'INFO:', 'WARNING:', 'ERROR:')):
        return True
        
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
    if any([
        text.startswith(('def ', 'class ', 'import ', 'from ', 'raise ', '@')),  # –ö–æ–¥
        text.startswith(('http://', 'https://', 'git://', 'file://')),  # URLs
        text.startswith(('#', '//', '/*', '*/')),  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        re.match(r'^[\w\-\.]+\.[a-zA-Z]+$', text),  # –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        re.match(r'^[a-zA-Z_]\w*$', text),  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        re.match(r'^[\[\]\(\)\{\}.,;:\'\"\\/<>!@#$%^&*+=|~`]', text),  # –°–∏–Ω—Ç–∞–∫—Å–∏—Å
        re.match(r'^(?:[0-9]+|0x[0-9a-fA-F]+)$', text),  # –ß–∏—Å–ª–∞
        re.match(r'^\s*$', text),  # –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        len(text) < 10  # –ö–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
    ]):
        return True
        
    return False

def is_user_facing_message(text: str) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    message_indicators = [
        re.search(r'[–∞-—è–ê-–Ø]', text),  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
        any(char in text for char in '.,!?:;'),  # –ó–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        any(emoji in text for emoji in 'üîÑ‚úÖ‚ùå‚ö†Ô∏èüö´‚è≥‚ùìüìäüë§üí≥üì±'),  # –≠–º–æ–¥–∑–∏
        re.search(r'[\'"](.*?)[\'"]', text),  # –¢–µ–∫—Å—Ç –≤ –∫–∞–≤—ã—á–∫–∞—Ö
        '%' in text and any(x in text for x in ('s', 'd', 'f')),  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        '{' in text and '}' in text  # f-—Å—Ç—Ä–æ–∫–∏
    ]
    
    return any(message_indicators)

def find_hardcoded_strings(file_path: str) -> List[Tuple[int, str]]:
    """
    –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∂—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –≤ Python —Ñ–∞–π–ª–µ.
    """
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    tree = ast.parse(content)
    strings = []
    
    class StringFinder(ast.NodeVisitor):
        def visit_Constant(self, node):
            if isinstance(node.value, str):
                text = node.value.strip()
                if not should_ignore_string(text, node) and is_user_facing_message(text):
                    strings.append((node.lineno, text))
            self.generic_visit(node)
            
        def visit_Str(self, node):
            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Python < 3.8
            text = node.s.strip()
            if not should_ignore_string(text, node) and is_user_facing_message(text):
                strings.append((node.lineno, text))
            self.generic_visit(node)
    
    finder = StringFinder()
    finder.visit(tree)
    return strings

def validate_project_texts(project_root: str) -> List[str]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∂—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
    """
    warnings = []
    excluded_dirs = {'__pycache__', 'venv', '.git', '.idea', '.vscode'}
    
    for root, dirs, files in os.walk(project_root):
        dirs[:] = [d for d in dirs if d not in excluded_dirs]
        
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                try:
                    hardcoded = find_hardcoded_strings(file_path)
                    if hardcoded:
                        rel_path = os.path.relpath(file_path, project_root)
                        for line_no, text in hardcoded:
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
                            display_text = text[:50] + '...' if len(text) > 50 else text
                            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤—ã–≤–æ–¥–µ
                            display_text = display_text.replace('\\', '\\\\')
                            warnings.append(
                                f"{rel_path}:{line_no} - –í–æ–∑–º–æ–∂–Ω–æ –∂—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {display_text}"
                            )
                except Exception as e:
                    warnings.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {file_path}: {str(e)}")
    
    return warnings

if __name__ == '__main__':
    import sys
    if len(sys.argv) > 1:
        project_path = sys.argv[1]
    else:
        project_path = os.getcwd()
    
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ...")
    warnings = validate_project_texts(project_path)
    if warnings:
        print("\n–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∂—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:")
        for w in warnings:
            print(f"- {w}")
        print("\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã.")
    else:
        print("–ñ—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
