from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import re
from typing import Dict

from .base_handler import BaseHandler
from utils.formatters import format_status_message, format_welcome_message, escape_markdown_v2
from texts import get_json, get_text

class UserHandlers(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.messages = get_json("handlers.user_messages")
        self.menu_messages = self.messages["menu"]
        self.status_messages = self.messages["status"]

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        telegram_id = update.effective_user.id
        telegram_username = update.effective_user.username
        first_name = update.effective_user.first_name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        if context.args and context.args[0].startswith("link_"):
            await self._handle_invitation_link(update, context.args[0], telegram_id, telegram_username)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await self.get_verified_user(telegram_id)
        
        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–≤—è–∑–∞–Ω
            keyboard = self.create_main_menu_keyboard(user)
            message = format_welcome_message(first_name, user)
            await update.message.reply_text(message, reply_markup=keyboard)
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            await self._show_registration_options(update)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        telegram_id = update.effective_user.id
        user_state = self.get_user_state(telegram_id)
        active_account = user_state.get('active_account')
        if active_account:
            accounts = self.db.get_users_by_telegram_id(telegram_id)
            user = next((u for u in accounts if u['marzban_username'] == active_account), None)
        else:
            user = await self.get_verified_user(telegram_id)

        if not user or not user.get('marzban_username'):
            await self._show_account_not_found(update)
            return

        await self._show_user_status(update.message, user['marzban_username'])
    
    async def my_id_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ Telegram ID"""
        user_id = update.effective_user.id
        username = update.effective_user.username
        first_name = update.effective_user.first_name
        
        message = f"üÜî **–í–ê–®–ê –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**\n\n"
        message += f"ID: `{user_id}`\n"
        message += f"–ò–º—è: {first_name}\n"
        if username:
            message += f"Username: @{username}\n"
        
        is_admin = self.is_admin(user_id)
        message += f"–°—Ç–∞—Ç—É—Å: {'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin else 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
        
        if not is_admin:
            message += f"\nüí° –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à ID ({user_id}) –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        user = await self.get_verified_user(update.effective_user.id)
        is_admin_user = self.is_admin(update.effective_user.id)

        if is_admin_user:
            text = self.menu_messages.get("admin_help", "–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        else:
            text = "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–µ–π VPN –ø–æ–¥–ø–∏—Å–∫–æ–π.\n\n"
            if user:
                text += "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å /status, —É–ø—Ä–∞–≤–ª—è—Ç—å /subscription –∏ —Ç.–¥."
            else:
                text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        await update.message.reply_text(text, reply_markup=self.create_reply_keyboard(user, is_admin_user))
    
    async def _handle_invitation_link(self, update: Update, invite_code: str, telegram_id: int, telegram_username: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        if not invite_code.startswith("link_"):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–¥–∞
        parts = invite_code.split("_")
        if len(parts) < 3:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
            return
        
        marzban_username = "_".join(parts[1:-1])
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
        if self.db.link_telegram_account(marzban_username, telegram_id, telegram_username):
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º Telegram ID –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è Marzban
            success = self.marzban.sync_telegram_id_to_marzban_notes(
                marzban_username, telegram_id, telegram_username
            )
            
            if success:
                self.logger.info(f"Telegram ID {telegram_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è Marzban –¥–ª—è {marzban_username}")
            else:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å Telegram ID –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è Marzban –¥–ª—è {marzban_username}")
            
            await update.message.reply_text(self.menu_messages.get("account_linked", "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!"))
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω."
            )
    
    async def _show_registration_options(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.config.NEW_USER_SETTINGS.get("auto_create", True):
            keyboard = [
                [InlineKeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="register_new")],
                [InlineKeyboardButton("üîó –£ –º–µ–Ω—è –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="link_existing")],
                [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="link_existing")],
                [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(self.menu_messages.get("welcome_unlinked", "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"), reply_markup=reply_markup)
    
    async def _show_user_status(self, message, marzban_username: str, edit_message: bool = False):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            self.logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {marzban_username}")

            user_info = self.marzban.get_user(marzban_username)
            if not user_info:
                error_text = self.status_messages["error"]["get_info"].format(
                    username=escape_markdown_v2(marzban_username)
                )
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                reply_markup = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
                        InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="register_new")
                    ]
                ])
                if edit_message:
                    await message.edit_text(error_text, parse_mode='MarkdownV2', reply_markup=reply_markup)
                else:
                    await message.reply_text(error_text, parse_mode='MarkdownV2', reply_markup=reply_markup)
                return

            db_user = self.db.get_user_by_marzban_username(marzban_username)
            telegram_id = db_user['telegram_id'] if db_user and db_user.get('telegram_id') else None
            telegram_username = db_user['telegram_username'] if db_user and db_user.get('telegram_username') else None

            status_raw = user_info.get('status', 'unknown')
            expire_days, expire_date_str = self.marzban.get_subscription_days_left(user_info.get('expire'))
            
            status_texts = self.status_messages["user_status"]
            if expire_days is not None and expire_days < 0:
                status = status_texts["expired"]
            else:
                status = status_texts["active"] if status_raw == 'active' else status_texts["disabled"]

            data_limit_gb = self.marzban.format_data_limit(user_info.get('data_limit'))
            used_traffic_gb = self.marzban.format_used_traffic(user_info.get('used_traffic'))
            
            try:
                formatted_used_traffic = f"{float(used_traffic_gb):.2f} GB" if used_traffic_gb else "0 GB"
            except (ValueError, TypeError):
                formatted_used_traffic = used_traffic_gb or "0 GB"

            try:
                formatted_data_limit = f"{float(data_limit_gb):.2f} GB" if data_limit_gb and data_limit_gb != status_texts["unlimited"] else status_texts["unlimited"]
            except (ValueError, TypeError):
                formatted_data_limit = data_limit_gb or status_texts["unlimited"]

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile = self.status_messages["profile"]
            telegram_status = self.status_messages["user_status"]["telegram"]

            safe_username = escape_markdown_v2(marzban_username)
            safe_status = escape_markdown_v2(status)
            safe_used_traffic = escape_markdown_v2(formatted_used_traffic)
            safe_data_limit = escape_markdown_v2(formatted_data_limit)
            safe_expire_date = escape_markdown_v2(expire_date_str if expire_date_str else "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            safe_expire_days = escape_markdown_v2(str(expire_days) if expire_days is not None else "0")

            if telegram_id:
                safe_telegram_id = f"`{escape_markdown_v2(str(telegram_id))}`"
            else:
                safe_telegram_id = telegram_status["not_linked"]

            if telegram_username:
                safe_telegram_username = f"@{escape_markdown_v2(str(telegram_username))}"
            else:
                safe_telegram_username = telegram_status["not_specified"]

            text = (
                profile["header"] +
                profile["username"].format(username=safe_username) +
                profile["telegram_id"].format(telegram_id=safe_telegram_id) +
                profile["telegram_username"].format(telegram_username=safe_telegram_username) +
                profile["stats_header"] +
                profile["status"].format(status=safe_status) +
                profile["traffic"].format(used_traffic=safe_used_traffic, data_limit=safe_data_limit) +
                profile["expire_date"].format(expire_date=safe_expire_date) +
                profile["days_left"].format(days_left=safe_expire_days)
            )

            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status")],
                [InlineKeyboardButton("üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"get_subscription_{marzban_username}")],
                [InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="payment")],
                [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)
            if edit_message:
                await message.edit_text(text, reply_markup=reply_markup, parse_mode='MarkdownV2')
            else:
                await message.reply_text(text, reply_markup=reply_markup, parse_mode='MarkdownV2')

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {marzban_username}: {str(e)}")
            error_message = get_text("messages.errors.GENERIC_ERROR")
            if edit_message:
                await message.edit_text(error_message, parse_mode='MarkdownV2')
            else:
                await message.reply_text(error_message, parse_mode='MarkdownV2')
    
    async def main_menu_callback(self, query, telegram_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = await self.get_verified_user(telegram_id)
        keyboard = self.create_main_menu_keyboard(user)
        
        first_name = query.from_user.first_name
        
        if user:
            message = format_welcome_message(first_name, user)
        else:
            message = self.menu_messages.get("welcome_unlinked", "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        
        try:
            await query.edit_message_text(message, reply_markup=keyboard)
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
            await query.message.reply_text(message, reply_markup=keyboard)
    
    async def support_command(self, update, context=None):
        """–ö–æ–º–∞–Ω–¥–∞ /support ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
        try:
            await update.message.reply_text(get_text("user.support.SUPPORT_INFO"))
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
            await update.message.reply_text(get_text("messages.errors.GENERIC_ERROR"))

    async def download_app_command(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'"""
        query_or_message = update.callback_query or update.message
        
        text = """
üì± –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –î–õ–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É:

‚¨áÔ∏è **Windows**
[V2RayN](https://github.com/2dust/v2rayN/releases/latest) - –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–π.

‚¨áÔ∏è **Android**
[V2RayNG](https://github.com/2dust/v2rayNG/releases/latest) - –ü—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π –∫–ª–∏–µ–Ω—Ç.

‚¨áÔ∏è **iOS & macOS**
[FoXray](https://apps.apple.com/us/app/foxray/id6448898396) - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤.
[V2Box](https://apps.apple.com/us/app/v2box-v2ray-client/id6446814690) - –ï—â–µ –æ–¥–∏–Ω —Ö–æ—Ä–æ—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è Apple.

*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*
1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É-–ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –±–æ—Ç–∞.
3. –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É.
4. –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å
        if hasattr(query_or_message, 'edit_message_text'):
            await query_or_message.edit_message_text(text, parse_mode='Markdown', reply_markup=keyboard, disable_web_page_preview=True)
        else:
            await query_or_message.reply_text(text, parse_mode='Markdown', reply_markup=keyboard, disable_web_page_preview=True)

    async def handle_reply_keyboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é"""
        text = update.message.text
        telegram_id = update.effective_user.id
        buttons = self.menu_messages["buttons"]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self.get_verified_user(telegram_id)
        is_admin_user = self.is_admin(telegram_id)
        
        # –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not user:
            if text == buttons["create_account"]:
                from .registration_handlers import RegistrationHandlers
                reg_handler = RegistrationHandlers(self.db, self.marzban)
                return await reg_handler.start_registration_command(update, context)
            
            elif text == buttons["link_account"]:
                from .registration_handlers import RegistrationHandlers
                reg_handler = RegistrationHandlers(self.db, self.marzban)
                return await reg_handler.link_existing_command(update)

            elif text == buttons["support"]:
                return await self.support_command(update)

            elif text == buttons["help"]:
                return await self.help_command(update, context)
                
            else:
                return await self.start_command(update, context)

        # –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if text == buttons["my_status"]:
            return await self.status_command(update, context)
            
        elif text == buttons["subscription_link"]:
            from .subscription_handlers import SubscriptionHandlers
            sub_handler = SubscriptionHandlers(self.db, self.marzban)
            return await sub_handler.get_user_subscription_command(update, context)
            
        elif text == buttons["payment"]:
            from .payment_handlers import PaymentHandlers
            payment_handler = PaymentHandlers(self.db, self.marzban)
            class FakeQuery:
                def __init__(self, message):
                    self.message = message
                async def answer(self): pass
                async def edit_message_text(self, *args, **kwargs):
                    return await self.message.reply_text(*args, **kwargs)
            return await payment_handler.show_payment_plans(FakeQuery(update.message))

        elif text == buttons["apps"]:
            return await self.download_app_command(update)
            
        elif text == buttons["support"]:
            return await self.support_command(update)

        elif text == buttons["main_menu"]:
            return await self.start_command(update, context)
            
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
        elif text == buttons["admin_panel"] and is_admin_user:
            from .admin_handlers import AdminHandlers
            admin_handler = AdminHandlers(self.db, self.marzban)
            return await admin_handler.admin_panel_command(update, context)

        elif text == buttons["stats"] and is_admin_user:
            from .admin_handlers import AdminHandlers
            admin_handler = AdminHandlers(self.db, self.marzban)
            return await admin_handler.stats_command(update, context)

        elif text == buttons["new_users"] and is_admin_user:
            from .admin_handlers import AdminHandlers
            admin_handler = AdminHandlers(self.db, self.marzban)
            return await admin_handler.new_users_command(update, context)

        elif text == buttons["pending_payments"] and is_admin_user:
            from .admin_handlers import AdminHandlers
            admin_handler = AdminHandlers(self.db, self.marzban)
            return await admin_handler.pending_payments_command(update, context)

        elif text == buttons["links"] and is_admin_user:
            from .admin_handlers import AdminHandlers
            admin_handler = AdminHandlers(self.db, self.marzban)
            return await admin_handler.admin_links_command(update, context)

        elif text == buttons["commands"] and is_admin_user:
            try:
                await update.message.reply_text(get_text("admin.commands"))
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ admin_help: {e}")
                await update.message.reply_text(self.menu_messages["commands_unavailable"])

        else:
            await update.message.reply_text(
                self.menu_messages["use_buttons"],
                reply_markup=self.create_reply_keyboard(user, is_admin_user)
            )
    
    async def my_accounts_command(self, update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º Telegram ID"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        is_callback = hasattr(update, 'from_user')  # –µ—Å–ª–∏ —ç—Ç–æ query
        if is_callback:
            telegram_id = update.from_user.id
            message_obj = update.message if hasattr(update, 'message') else update
        else:
            telegram_id = update.effective_user.id
            message_obj = update.message
        accounts = self.db.get_users_by_telegram_id(telegram_id)

        if not accounts:
            if is_callback and hasattr(update, 'edit_message_text'):
                await update.edit_message_text(
                    self.menu_messages["account_not_linked"],
                    reply_markup=self.create_reply_keyboard()
                )
            else:
                await message_obj.reply_text(
                    self.menu_messages["account_not_linked"],
                    reply_markup=self.create_reply_keyboard()
                )
            return

        my_accounts = self.menu_messages["my_accounts"]
        message = my_accounts["header"]
        for acc in accounts:
            message += my_accounts["account_line"].format(
                username=acc['marzban_username'],
                status=acc['subscription_status']
            )
        message += my_accounts["footer"]
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        if is_callback and hasattr(update, 'edit_message_text'):
            await update.edit_message_text(message, reply_markup=reply_markup)
        else:
            await message_obj.reply_text(message, reply_markup=reply_markup)

    async def choose_account_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ"""
        telegram_id = update.effective_user.id
        accounts = self.db.get_users_by_telegram_id(telegram_id)
        print(f"[DEBUG] choose_account_command accounts: {accounts}")  # Debug-–≤—ã–≤–æ–¥
        if not accounts:
            msg = "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞."
            if getattr(update, 'message', None):
                await update.message.reply_text(msg)
            else:
                await update.effective_message.reply_text(msg)
            return
        keyboard = []
        for acc in accounts:
            keyboard.append([
                InlineKeyboardButton(
                    f"{acc['marzban_username']} ({acc['subscription_status']})",
                    callback_data=f"set_active_account_{acc['marzban_username']}"
                )
            ])
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        if getattr(update, 'message', None):
            await update.message.reply_text(text, reply_markup=reply_markup)
        else:
            await update.effective_message.reply_text(text, reply_markup=reply_markup)

    async def set_active_account_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ callback_data"""
        telegram_id = query.from_user.id
        data = query.data
        if not data.startswith("set_active_account_"):
            return
        marzban_username = data.replace("set_active_account_", "")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ user_state
        self.set_user_state(telegram_id, {
            'active_account': marzban_username
        })
        await query.answer()
        await query.edit_message_text(f"–ê–∫–∫–∞—É–Ω—Ç {marzban_username} –≤—ã–±—Ä–∞–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π! –¢–µ–ø–µ—Ä—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
    
    def create_main_menu_keyboard(self, user: Dict = None) -> InlineKeyboardMarkup:
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="status")],
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="payment")],
            [InlineKeyboardButton("üë• –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="my_accounts")],
            [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
            [InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="register_new")],
        ]
        return InlineKeyboardMarkup(keyboard)

    async def support_callback(self, query, context=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        try:
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
            await query.edit_message_text(get_json("handlers.user_messages")["support_info"], reply_markup=reply_markup)
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (callback): {e}")
            await query.edit_message_text(get_text("messages.errors.GENERIC_ERROR"))

    async def _show_account_not_found(self, update):
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        msg = get_json("handlers.user_messages")["account_not_found"]
        reply_markup = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
                InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É", callback_data="register_new")
            ]
        ])
        if hasattr(update, 'edit_message_text'):
            await update.edit_message_text(msg, reply_markup=reply_markup)
        else:
            await update.message.reply_text(msg, reply_markup=reply_markup)