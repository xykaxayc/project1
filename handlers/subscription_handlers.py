from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from .base_handler import BaseHandler
from texts import get_json

class SubscriptionHandlers(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.messages = get_json("handlers.subscription_messages")
        print("Loaded subscription messages:", self.messages)
    
    async def get_user_subscription_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–∑–≤–∞–Ω–æ –ª–∏ —á–µ—Ä–µ–∑ callback –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É
        is_callback = hasattr(update, 'callback_query') and update.callback_query is not None
        user_id = update.callback_query.from_user.id if is_callback else update.effective_user.id
        message_obj = update.callback_query.message if is_callback else update.message
        
        if not self.is_admin(user_id):
            # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ—é —Å—Å—ã–ª–∫—É
            user = await self.get_verified_user(user_id)
            if not user:
                await message_obj.reply_text(self.messages["errors"]["account_not_linked"])
                return
            username = user['marzban_username']
        else:
            # –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not context.args:
                user = await self.get_verified_user(user_id)
                if user:
                    username = user['marzban_username']
                else:
                    await message_obj.reply_text(
                        self.messages["errors"]["admin_usage"],
                        parse_mode='Markdown'
                    )
                    return
            else:
                username = context.args[0]
        
        await self._send_subscription_info(message_obj, username, user_id)
    
    async def handle_subscription_callback(self, query, username: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Å—ã–ª–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫"""
        await query.answer(self.messages["subscription"]["loading"])
        
        connection_info = self.marzban.get_user_connection_info(username)
        
        if not connection_info or not connection_info.get('subscription_url'):
            await query.edit_message_text(
                self.messages["errors"]["link_not_found"].format(username=username)
            )
            return
        
        subscription_url = connection_info['subscription_url']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
        url_status = await self._test_subscription_url(subscription_url)
        
        link_message = self.messages["subscription"]["link_message"]
        message = (
            link_message["header"] +
            link_message["user"].format(username=username) +
            link_message["status"].format(url_status=url_status) +
            link_message["main_link"].format(subscription_url=subscription_url)
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if connection_info.get('clash_url'):
            message += link_message["clash_link"].format(clash_url=connection_info['clash_url'])
        
        message += link_message["instructions"]
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"get_subscription_{username}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        if self.is_admin(query.from_user.id):
            keyboard.insert(0, [InlineKeyboardButton("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"test_sub_{username}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def test_subscription_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        if not await self.require_admin(update):
            return
        
        if not context.args:
            await update.message.reply_text(
                self.messages["errors"]["test_usage"],
                parse_mode='Markdown'
            )
            return
        
        username = context.args[0]
        
        await update.message.reply_text(
            self.messages["subscription"]["testing"].format(username=username)
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫
        test_results = self.marzban.test_subscription_url(username)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result_messages = self.messages["subscription"]["test_results"]
        message = result_messages["header"]
        
        working_count = 0
        total_count = len(test_results)
        
        for format_name, result in test_results.items():
            if result.get('works', False):
                status = result_messages["success"]
                working_count += 1
            else:
                error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                status = result_messages["error"].format(error=error)
            
            message += result_messages["format"].format(
                format=format_name,
                status=status
            )
        
        message += result_messages["summary"].format(
            working=working_count,
            total=total_count
        )
        
        await update.message.reply_text(message)

    async def _send_subscription_info(self, message, username: str, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        await message.reply_text(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {username}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        connection_info = self.marzban.get_user_connection_info(username)
        
        if not connection_info:
            await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {username}")
            return
        
        subscription_url = connection_info.get('subscription_url')
        
        if not subscription_url:
            await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {username}")
            return
        
        url_status = await self._test_subscription_url(subscription_url)
        
        message_text = f"üîó **–°–°–´–õ–ö–ê –ü–û–î–ü–ò–°–ö–ò**\n\n"
        message_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{username}`\n"
        message_text += f"üìä –°—Ç–∞—Ç—É—Å: {connection_info.get('status', 'unknown')}\n"
        message_text += f"üîß –ü—Ä–æ—Ç–æ–∫–æ–ª—ã: {', '.join(connection_info.get('protocols', []))}\n"
        message_text += f"üìä –°—Ç–∞—Ç—É—Å —Å—Å—ã–ª–∫–∏: {url_status}\n\n"
        
        message_text += f"üìã **–û—Å–Ω–æ–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞:**\n"
        message_text += f"`{subscription_url}`\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if connection_info.get('clash_url'):
            message_text += f"‚ö° **Clash:**\n`{connection_info['clash_url']}`\n\n"
        
        if connection_info.get('v2ray_url'):
            message_text += f"üöÄ **V2Ray:**\n`{connection_info['v2ray_url']}`\n\n"
        
        message_text += f"üì± **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
        message_text += f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É\n"
        message_text += f"2. –û—Ç–∫—Ä–æ–π—Ç–µ VPN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        message_text += f"3. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Å—Å—ã–ª–∫–µ\n"
        message_text += f"4. –û–±–Ω–æ–≤–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä—ã –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å!"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = []
        if self.is_admin(user_id):
            keyboard.append([InlineKeyboardButton("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"test_sub_{username}")])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await message.reply_text(message_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def _test_subscription_url(self, url: str) -> str:
        """–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            import requests
            response = requests.head(url, timeout=5)
            return "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞" if response.status_code == 200 else "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
        except:
            return "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"