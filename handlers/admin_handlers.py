import sqlite3
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes

from .base_handler import BaseHandler
from utils.formatters import format_user_info_message, format_statistics_message, format_pending_payments_message
from texts import get_text

class AdminHandlers(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    
    def _get_user_id(self, update):
        is_callback = hasattr(update, 'callback_query') and update.callback_query is not None
        return update.callback_query.from_user.id if is_callback else update.effective_user.id

    async def admin_links_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        if not await self.require_admin(update):
            return
        
        unlinked_users = self.db.get_unlinked_users()
        
        if not unlinked_users:
            await update.message.reply_text(get_text("admin.ALL_USERS_LINKED"))
            return
        
        bot_username = context.bot.username
        
        await update.message.reply_text(get_text("admin.LINKS_HEADER"))
        
        for username in unlinked_users:
            invite_code = f"link_{username}_{hash(username) % 10000:04d}"
            link = f"https://t.me/{bot_username}?start={invite_code}"
            
            message = get_text("admin.LINK_USER", username=username, link=link)
            
            try:
                await update.message.reply_text(message)
            except Exception as e:
                self.logger.error(get_text("admin.LINK_SEND_ERROR", username=username, error=e))
        
        await update.message.reply_text(
            get_text("admin.LINKS_SUMMARY", count=len(unlinked_users))
        )
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        if not await self.require_admin(update):
            return
        
        stats = self.db.get_statistics()
        message = format_statistics_message(stats)
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def user_info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        if not await self.require_admin(update):
            return
        
        if not context.args:
            await update.message.reply_text(get_text("admin.USER_INFO_USAGE"), parse_mode='Markdown')
            return
        
        username = context.args[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_user = self.db.get_user_by_marzban_username(username)
        if not db_user:
            await update.message.reply_text(get_text("admin.USER_NOT_FOUND", username=username))
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Marzban
        stats = self.marzban.get_user_usage_stats(username)
        
        message = format_user_info_message(db_user, stats, self.marzban)
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
        payments = self.db.get_payment_history(marzban_username=username, limit=5)
        
        def esc(text):
            if not text:
                return '-'
            return str(text).replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
        
        if payments:
            message += f"\n{get_text('admin.LAST_PAYMENTS_HEADER')}\n"
            for payment in payments:
                dt = datetime.fromisoformat(payment['payment_date'])
                date = esc(dt.strftime('%d.%m.%Y'))
                time = esc(dt.strftime('%H:%M'))
                amount = esc(payment['amount'])
                status = esc(payment['status'])
                message += f"‚Ä¢ {date} {time}: {amount} —Ä—É–±. \\({status}\\)\n"

        await update.message.reply_text(message, parse_mode='MarkdownV2')
    
    async def pending_payments_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫"""
        if not await self.require_admin(update):
            return
        
        requests = self.db.get_pending_payment_requests()
        
        if not requests:
            await update.message.reply_text("‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É.")
            return
        
        message = format_pending_payments_message(requests)
        await update.message.reply_text(message)
    
    async def new_users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤—ã—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not await self.require_admin(update):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        conn = sqlite3.connect(self.db.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT marzban_username, telegram_id, telegram_username, registration_date, notes
            FROM user_telegram_mapping 
            WHERE registration_date >= datetime('now', '-1 day')
            AND notes LIKE '%–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –±–æ—Ç–∞%'
            ORDER BY registration_date DESC
        ''')
        
        new_users = cursor.fetchall()
        conn.close()
        
        if not new_users:
            await update.message.reply_text("üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–µ –±—ã–ª–æ.")
            return
        
        message = f"üÜï –ù–û–í–´–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò (24—á): {len(new_users)}\n\n"
        
        for user in new_users:
            username, telegram_id, telegram_username, reg_date, notes = user
            reg_time = datetime.fromisoformat(reg_date).strftime('%d.%m %H:%M')
            
            message += f"üë§ {username}\n"
            message += f"üì± @{telegram_username or 'N/A'} (ID: {telegram_id})\n"
            message += f"üïê {reg_time}\n"
            message += f"/user_info {username}\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(message) > 4000:
            parts = [message[i:i+4000] for i in range(0, len(message), 4000)]
            for part in parts:
                await update.message.reply_text(part)
        else:
            await update.message.reply_text(message)
    
    async def add_telegram_note_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Telegram ID –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        if not await self.require_admin(update):
            return
        
        if len(context.args) != 2:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/add_note username telegram_id`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/add_note Dasha 123456789`",
                parse_mode='Markdown'
            )
            return
        
        username = context.args[0]
        try:
            telegram_id = int(context.args[1])
        except ValueError:
            await update.message.reply_text("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = self.db.get_user_by_marzban_username(username)
        if not user:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
        success = self.db.add_telegram_id_to_notes(username, telegram_id)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ Telegram ID {telegram_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Telegram ID –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –¥–ª—è {username}"
            )
    
    async def sync_telegram_notes_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ—á–∞–Ω–∏–π —Å Telegram ID –¥–ª—è –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not await self.require_admin(update):
            return
        
        await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏–º–µ—á–∞–Ω–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram ID
        conn = sqlite3.connect(self.db.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT marzban_username, telegram_id, telegram_username, notes
            FROM user_telegram_mapping 
            WHERE telegram_id IS NOT NULL
        ''')
        
        users = cursor.fetchall()
        conn.close()
        
        updated_count = 0
        for user_data in users:
            username, telegram_id, telegram_username, current_notes = user_data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ Telegram ID –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è—Ö
            if current_notes and f"Telegram ID: {telegram_id}" in current_notes:
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
            note_parts = [f"Telegram ID: {telegram_id}"]
            if telegram_username:
                note_parts.append(f"@{telegram_username}")
            
            if current_notes:
                new_notes = f"{current_notes} | {' | '.join(note_parts)}"
            else:
                new_notes = " | ".join(note_parts)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
            if self.db.update_user_notes(username, new_notes):
                updated_count += 1
        
        await update.message.reply_text(
            f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π: {updated_count}\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram: {len(users)}"
        )
    
    async def sync_to_marzban_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö Telegram ID –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è Marzban"""
        if not await self.require_admin(update):
            return
        
        await update.message.reply_text("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Telegram ID –≤ Marzban...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        conn = sqlite3.connect(self.db.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT marzban_username, telegram_id, telegram_username
            FROM user_telegram_mapping 
            WHERE telegram_id IS NOT NULL AND is_verified = TRUE
        ''')
        
        users = cursor.fetchall()
        conn.close()
        
        success_count = 0
        error_count = 0
        
        for marzban_username, telegram_id, telegram_username in users:
            success = self.marzban.sync_telegram_id_to_marzban_notes(
                marzban_username, telegram_id, telegram_username
            )
            
            if success:
                success_count += 1
                self.logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω {marzban_username} -> Telegram ID {telegram_id}")
            else:
                error_count += 1
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {marzban_username}")
        
        await update.message.reply_text(
            f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Marzban –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–∫–∏: {error_count}\n"
            f"üìä –í—Å–µ–≥–æ: {len(users)}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤ –ø–∞–Ω–µ–ª–∏ Marzban –≤ –ø–æ–ª–µ '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ' –±—É–¥—É—Ç Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )
    
    async def test_marzban_note_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –≤ Marzban –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not await self.require_admin(update):
            return
        
        if len(context.args) != 1:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/test_note username`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/test_note Andrey_Ios`",
                parse_mode='Markdown'
            )
            return
        
        username = context.args[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = self.db.get_user_by_marzban_username(username)
        if not user or not user['telegram_id']:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–≤—è–∑–∞–Ω —Å Telegram")
            return
        
        await update.message.reply_text(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –¥–ª—è {username}...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
        success = self.marzban.sync_telegram_id_to_marzban_notes(
            username, user['telegram_id'], user['telegram_username']
        )
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è {username}\n"
                f"Telegram ID: {user['telegram_id']}\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ Marzban!"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –¥–ª—è {username}\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            )

    async def admin_panel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
        if not await self.require_admin(update):
            return
            
        text = "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
        keyboard = self.create_admin_keyboard()
        
        await update.message.reply_text(text, reply_markup=keyboard)
    
    async def delete_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
        if not self.config.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        if not context.args or len(context.args) < 1:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ username –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /delete_user <username>")
            return
        username = context.args[0]
        deleted = self.db.delete_user_by_username(username)
        if deleted:
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    async def cleanup_accounts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª—è–µ—Ç –∏–∑ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Marzban"""
        if not self.config.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        users = self.db.get_all_users()
        removed = []
        for user in users:
            username = user.get('marzban_username')
            if not username:
                continue
            try:
                marzban_user = self.marzban.get_user(username)
                if not marzban_user:
                    self.db.delete_user_by_username(username)
                    removed.append(username)
            except Exception as e:
                if '404' in str(e):
                    self.db.delete_user_by_username(username)
                    removed.append(username)
        if removed:
            await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {', '.join(removed)}")
        else:
            await update.message.reply_text("–í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –±–∞–∑–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Marzban.")
