import logging
from abc import ABC
from typing import Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes

from database_manager import DatabaseManager
from marzban_api import MarzbanAPI
from config import get_config
from texts import get_text

config = get_config()
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class BaseHandler(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    def __init__(self, db_manager: DatabaseManager, marzban_api: MarzbanAPI):
        self.db = db_manager
        self.marzban = marzban_api
        self.config = config
        self.logger = logger
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return self.config.is_admin(user_id)
    
    async def require_admin(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(get_text("messages.errors.NO_ADMIN_RIGHTS"))
            return False
        return True
    
    async def get_verified_user(self, telegram_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.db.get_user_by_telegram_id(telegram_id)
        if not user or not user['is_verified']:
            return None
        return user
    
    async def send_admin_notification(self, context: ContextTypes.DEFAULT_TYPE, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        for admin_id in self.config.ADMIN_IDS:
            try:
                await context.bot.send_message(chat_id=admin_id, text=message, parse_mode='Markdown')
            except Exception as e:
                self.logger.error(get_text("messages.errors.ADMIN_NOTIFICATION_ERROR", admin_id=admin_id, error=e))
    
    def create_main_menu_keyboard(self, user: Dict = None) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ inline –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="create_account"), InlineKeyboardButton("üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="link_account")],
            [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"), InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        if user and user.get('is_verified'):
            keyboard.insert(1, [InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data=f"get_subscription_{user['marzban_username']}")])
        keyboard.append([InlineKeyboardButton("üì± –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data="download_app")])
        return InlineKeyboardMarkup(keyboard)
    
    def create_reply_keyboard(self, user: Dict = None, is_admin: bool = False) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é"""
        if not user:
            keyboard = [
                ["üÜï –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"],
                ["üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
            ]
        else:
            keyboard = [
                ["üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", "üîó –°—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"],
                ["üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è"],
                ["üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ]
            if is_admin:
                keyboard.append(["üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
        return ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder=get_text("CHOOSE_ACTION_TEXT")
        )
    
    def create_admin_keyboard(self) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        keyboard = [
            ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
            ["üí∞ –û–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏", "üîó –°—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏"],
            ["üîß –ö–æ–º–∞–Ω–¥—ã", "‚óÄÔ∏è –ù–∞–∑–∞–¥"]
        ]
        return ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder=get_text("CHOOSE_ADMIN_ACTION_TEXT")
        )
    
    async def send_message_with_keyboard(self, update: Update, text: str, user: Dict = None, 
                                       is_admin: bool = False, parse_mode: str = None,
                                       inline_keyboard: InlineKeyboardMarkup = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∏–∂–Ω–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        reply_keyboard = self.create_reply_keyboard(user, is_admin)
        await update.message.reply_text(
            text,
            reply_markup=reply_keyboard if not inline_keyboard else inline_keyboard,
            parse_mode=parse_mode
        )
        if inline_keyboard:
            await update.message.reply_text(
                get_text("CHOOSE_ACTION_TEXT"),
                reply_markup=reply_keyboard
            )
    
    async def edit_message_with_keyboard(self, query, text: str, user: Dict = None,
                                       is_admin: bool = False, parse_mode: str = None,
                                       inline_keyboard: InlineKeyboardMarkup = None):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        try:
            if inline_keyboard:
                await query.edit_message_text(text, parse_mode=parse_mode, reply_markup=inline_keyboard)
            else:
                await query.edit_message_text(text, parse_mode=parse_mode)
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            reply_keyboard = self.create_reply_keyboard(user, is_admin)
            await query.message.reply_text(
                text,
                parse_mode=parse_mode,
                reply_markup=inline_keyboard or reply_keyboard
            )
    
    def get_user_state(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return user_states.get(user_id, {})
    
    def set_user_state(self, user_id: int, state: Dict):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_states[user_id] = state
    
    def clear_user_state(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in user_states:
            del user_states[user_id]
    
    def _get_user_id(self, update):
        is_callback = hasattr(update, 'callback_query') and update.callback_query is not None
        return update.callback_query.from_user.id if is_callback else update.effective_user.id

    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ self._get_user_id(update) –≤–º–µ—Å—Ç–æ update.effective_user.id –≤–µ–∑–¥–µ, –≥–¥–µ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è