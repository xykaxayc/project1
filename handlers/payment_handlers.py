from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from .base_handler import BaseHandler
from plans import PLANS, Plan
from payment_methods import PAYMENT_METHODS, PaymentMethodData
from texts import get_json

class PaymentHandlers(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ —á–µ–∫–æ–≤"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.messages = get_json("handlers.payment_messages")
    
    async def show_payment_accounts(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
        user_id = query.from_user.id
        accounts = self.db.get_users_by_telegram_id(user_id)
        if not accounts:
            await query.edit_message_text(self.messages["accounts"]["no_accounts"])
            return
            
        keyboard = []
        for acc in accounts:
            text = f"{acc['marzban_username']} ({acc['subscription_status']})"
            keyboard.append([
                InlineKeyboardButton(text, callback_data=f"payacc_{acc['marzban_username']}")
            ])
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            self.messages["accounts"]["select_account"],
            reply_markup=reply_markup
        )

    async def show_payment_plans_for_account(self, query, marzban_username: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        message = self.messages["plans"]["for_account"].format(username=marzban_username)
        keyboard = []
        
        for plan in PLANS:
            price_per_month = plan.price / (plan.duration_days / 30)
            plan_format = self.messages["plans"]["format"]
            
            if plan.description:
                plan_text = plan_format["with_description"].format(
                    name=plan.name,
                    price=plan.price,
                    description=plan.description
                )
            elif plan.duration_days > 30:
                plan_text = plan_format["with_monthly"].format(
                    name=plan.name,
                    price=plan.price,
                    price_per_month=price_per_month
                )
            else:
                plan_text = plan_format["base"].format(
                    name=plan.name,
                    price=plan.price
                )
                
            keyboard.append([
                InlineKeyboardButton(plan_text, callback_data=f"plan_{plan.id}_{marzban_username}")
            ])
            
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="payment")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)

    async def show_payment_plans(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        message = self.messages["plans"]["header"]
        keyboard = []
        
        for plan in PLANS:
            price_per_month = plan.price / (plan.duration_days / 30)
            plan_format = self.messages["plans"]["format"]
            
            if plan.description:
                plan_text = plan_format["with_description"].format(
                    name=plan.name,
                    price=plan.price,
                    description=plan.description
                )
            elif plan.duration_days > 30:
                plan_text = plan_format["with_monthly"].format(
                    name=plan.name,
                    price=plan.price,
                    price_per_month=price_per_month
                )
            else:
                plan_text = plan_format["base"].format(
                    name=plan.name,
                    price=plan.price
                )
                
            keyboard.append([InlineKeyboardButton(plan_text, callback_data=f"plan_{plan.id}")])
            
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)

    async def process_payment_plan(self, query, plan_id: str, marzban_username: str = None):
        plan = next((p for p in PLANS if str(p.id) == str(plan_id)), None)
        if not plan:
            await query.edit_message_text(self.messages["payment"]["errors"]["invalid_plan"])
            self.logger.error(f"–ü–ª–∞–Ω {plan_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã: {[p.id for p in PLANS]}")
            return

        user_id = query.from_user.id
        if marzban_username:
            accounts = self.db.get_users_by_telegram_id(user_id)
            user = next((u for u in accounts if u['marzban_username'] == marzban_username), None)
        else:
            user_state = self.get_user_state(user_id)
            active_account = user_state.get('active_account')
            if active_account:
                accounts = self.db.get_users_by_telegram_id(user_id)
                user = next((u for u in accounts if u['marzban_username'] == active_account), None)
            else:
                user = await self.get_verified_user(user_id)

        if not user:
            await query.edit_message_text(self.messages["payment"]["errors"]["user_not_found"])
            return

        payment_details = self.messages["payment"]["details"]
        method_formats = payment_details["methods"]
        
        methods_text = []
        for method in PAYMENT_METHODS:
            if method.id == "card":
                methods_text.append(method_formats["card"].format(details=method.details))
            elif method.id == "qiwi":
                methods_text.append(method_formats["qiwi"].format(details=method.details))

        message = (
            payment_details["header"] +
            payment_details["plan_info"].format(
                plan_name=plan.name,
                plan_price=plan.price,
                plan_duration=plan.duration_days,
                plan_description=plan.description or ""
            ) +
            payment_details["user_info"].format(username=user['marzban_username']) +
            "\n".join(methods_text)
        )

        keyboard = [
            [InlineKeyboardButton(f"‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª {plan.price} —Ä—É–±.", callback_data=f"paid_{plan.id}_{user['marzban_username']}")],
            [InlineKeyboardButton("‚óÄÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–ª–∞–Ω", callback_data=f"payacc_{user['marzban_username']}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def handle_payment_claim(self, query, plan_id: str, user: dict, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –æ–± –æ–ø–ª–∞—Ç–µ"""
        plan = next((p for p in PLANS if str(p.id) == str(plan_id)), None)
        if not plan:
            self.logger.error(f"–ü–ª–∞–Ω {plan_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã: {[p.id for p in PLANS]}")
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        request_id = self.db.create_payment_request(
            telegram_id=user['telegram_id'],
            marzban_username=user['marzban_username'],
            plan_id=str(plan.id),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            amount=plan.price
        )
        
        if not request_id:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.set_user_state(query.from_user.id, {
            'state': 'waiting_receipt',
            'request_id': request_id,
            'plan_id': str(plan.id),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            'username': user['marzban_username']
        })
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        payment_messages = get_json("handlers.payment_messages")
        payment_claim_message = await query.edit_message_text(
            payment_messages["notifications"]["payment_claim_created"].format(
                request_id=request_id,
                plan_name=plan.name,
                plan_price=plan.price,
                username=user['marzban_username']
            ),
            parse_mode='Markdown'
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ user_state
        self.set_user_state(query.from_user.id, {
            'state': 'waiting_receipt',
            'request_id': request_id,
            'plan_id': str(plan.id),
            'username': user['marzban_username'],
            'payment_message_id': payment_claim_message.message_id
        })
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
        admin_message = f"üí∞ **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –û–ü–õ–ê–¢–£ #{request_id}**\n\n"
        admin_message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user['marzban_username']}`\n"
        admin_message += f"üì± Telegram: @{query.from_user.username or 'N/A'} (ID: {query.from_user.id})\n"
        admin_message += f"üìã –ü–ª–∞–Ω: {plan.name}\n"
        admin_message += f"üí∞ –°—É–º–º–∞: {plan.price} —Ä—É–±.\n"
        admin_message += f"üìÖ –ü–µ—Ä–∏–æ–¥: {plan.duration_days} –¥–Ω–µ–π\n\n"
        admin_message += f"üïê –û–∂–∏–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞..."
        
        await self.send_admin_notification(context, admin_message)
    
    async def handle_receipt_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —á–µ–∫–æ–≤ (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã)"""
        is_callback = hasattr(update, 'callback_query') and update.callback_query is not None
        user_id = update.callback_query.from_user.id if is_callback else update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∫—É —á–µ–∫–∞
        state = self.get_user_state(user_id)
        if not state or state.get('state') != 'waiting_receipt':
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã
        
        request_id = state['request_id']
        plan_id = state['plan_id']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–∞–µ–º file_id
        file_id = None
        file_type = None
        file_name = "—á–µ–∫"
        
        if update.message.photo:
            file_id = update.message.photo[-1].file_id
            file_type = "photo"
            file_name = "—Ñ–æ—Ç–æ —á–µ–∫–∞"
        elif update.message.document:
            file_id = update.message.document.file_id
            file_type = "document"
            file_name = update.message.document.file_name or "–¥–æ–∫—É–º–µ–Ω—Ç"
        
        if not file_id:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = self.db.add_receipt_to_request(request_id, file_id, file_type)
        
        if not success:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        payment_message_id = state.get('payment_message_id')
        if payment_message_id:
            try:
                await context.bot.delete_message(chat_id=update.effective_user.id, message_id=payment_message_id)
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π: {e}")
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        try:
            await context.bot.delete_message(chat_id=update.effective_user.id, message_id=update.message.message_id)
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫–æ–º: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.clear_user_state(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
        plan = next((p for p in PLANS if str(p.id) == str(plan_id)), None)
        plan_name = plan.name if plan else f"–ü–ª–∞–Ω #{plan_id}"
        plan_price = plan.price if plan else "N/A"
        plan_duration = plan.duration_days if plan else "N/A"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–æ–π '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        payment_messages = get_json("handlers.payment_messages")
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text=payment_messages["notifications"]["receipt_received"].format(
                file_name=file_name,
                request_id=request_id,
                plan_name=plan_name,
                plan_price=plan_price
            ),
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ —Å —á–µ–∫–æ–º
        admin_message = f"üì∏ **–ß–ï–ö –ü–û–õ–£–ß–ï–ù!**\n\n"
        admin_message += f"üÜî –ó–∞—è–≤–∫–∞ #{request_id}\n"
        admin_message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{state['username']}`\n"
        admin_message += f"üìã –ü–ª–∞–Ω: {plan_name}\n"
        admin_message += f"üí∞ –°—É–º–º–∞: {plan_price} —Ä—É–±.\n"
        admin_message += f"üìÖ –ü–µ—Ä–∏–æ–¥: {plan_duration} –¥–Ω–µ–π\n"
        admin_message += f"üì± –û—Ç: @{update.effective_user.username or 'N/A'}\n\n"
        admin_message += f"**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:**\n"
        admin_message += f"`/approve {request_id}` - –æ–¥–æ–±—Ä–∏—Ç—å\n"
        admin_message += f"`/reject {request_id} [–ø—Ä–∏—á–∏–Ω–∞]` - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —á–µ–∫ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in self.config.ADMIN_IDS:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_message(chat_id=admin_id, text=admin_message, parse_mode='Markdown')
                
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —á–µ–∫
                if file_type == "photo":
                    await context.bot.send_photo(
                        chat_id=admin_id,
                        photo=file_id,
                        caption=f"–ß–µ–∫ –∫ –∑–∞—è–≤–∫–µ #{request_id}"
                    )
                elif file_type == "document":
                    await context.bot.send_document(
                        chat_id=admin_id,
                        document=file_id,
                        caption=f"–ß–µ–∫ –∫ –∑–∞—è–≤–∫–µ #{request_id}"
                    )
                
                self.logger.info(f"–ß–µ–∫ –ø–æ –∑–∞—è–≤–∫–µ #{request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {admin_id}")
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    async def confirm_payment_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        if not await self.require_admin(update):
            return
        
        if len(context.args) != 2:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/confirm_payment username plan_id`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/confirm_payment user123 1`\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã: {', '.join(str(p.id) for p in PLANS)}",
                parse_mode='Markdown'
            )
            return
        
        username = context.args[0]
        plan_id = context.args[1]
        
        plan = next((p for p in PLANS if str(p.id) == str(plan_id)), None)
        if not plan:
            await update.message.reply_text(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏: {plan_id}\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã: {', '.join(str(p.id) for p in PLANS)}"
            )
            return
        
        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ Marzban
        if self.marzban.extend_user_subscription(username, plan.duration_days):
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞
            user = self.db.get_user_by_marzban_username(username)
            
            if user:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É
                self.db.record_payment(
                    telegram_id=user['telegram_id'] or 0,
                    marzban_username=username,
                    amount=plan.price,
                    payment_method=str(plan.id)
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user['telegram_id']:
                    try:
                        message = f"‚úÖ **–û–ü–õ–ê–¢–ê –ü–û–î–¢–í–ï–†–î–ñ–ï–ù–ê!**\n\n"
                        message += f"üìã –ü–ª–∞–Ω: {plan.name}\n"
                        message += f"üí∞ –°—É–º–º–∞: {plan.price} —Ä—É–±.\n"
                        message += f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {plan.duration_days} –¥–Ω–µ–π\n\n"
                        message += f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!\n"
                        message += f"–í–∞—à VPN –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."
                        
                        await context.bot.send_message(
                            chat_id=user['telegram_id'],
                            text=message,
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request['marzban_username']}: {e}")
            
            await update.message.reply_text(
                f"‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{username}`\n"
                f"üìã –ü–ª–∞–Ω: {plan.name}\n"
                f"üìÖ –ü—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞: {plan.duration_days} –¥–Ω–µ–π\n"
                f"üí∞ –°—É–º–º–∞: {plan.price} —Ä—É–±.",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {username}")

    async def approve_payment_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–æ–º"""
        if not await self.require_admin(update):
            return
        
        if not context.args:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/approve request_id [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/approve 123 –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω`",
                parse_mode='Markdown'
            )
            return
        
        try:
            request_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏.")
            return
        
        comment = " ".join(context.args[1:]) if len(context.args) > 1 else "–û–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = self.db.get_payment_request(request_id)
        if not request:
            await update.message.reply_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        if request['status'] != 'pending':
            await update.message.reply_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{request_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {request['status']}).")
            return
        
        # –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É
        success = self.db.approve_payment_request(request_id, update.effective_user.id, comment)
        if not success:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{request_id}.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ Marzban
        plan = next((p for p in PLANS if str(p.id) == str(request['plan_id'])), None)
        if plan and self.marzban.extend_user_subscription(request['marzban_username'], plan.duration_days):
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.db.record_payment(
                telegram_id=request['telegram_id'],
                marzban_username=request['marzban_username'],
                amount=request['amount'],
                payment_method=str(plan.id),
                status='completed'
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user_message = f"‚úÖ **–û–ü–õ–ê–¢–ê –ü–û–î–¢–í–ï–†–î–ñ–ï–ù–ê!**\n\n"
                user_message += f"üÜî –ó–∞—è–≤–∫–∞ #{request_id}\n"
                user_message += f"üìã –ü–ª–∞–Ω: {plan.name}\n"
                user_message += f"üí∞ –°—É–º–º–∞: {plan.price} —Ä—É–±.\n"
                user_message += f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {plan.duration_days} –¥–Ω–µ–π\n\n"
                if comment != "–û–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º":
                    user_message += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
                user_message += f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!"
                
                await context.bot.send_message(
                    chat_id=request['telegram_id'],
                    text=user_message,
                    parse_mode='Markdown',
                    reply_markup=self._main_menu_markup()
                )
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request['marzban_username']}: {e}")
            
            await update.message.reply_text(
                f"‚úÖ **–ó–∞—è–≤–∫–∞ #{request_id} –æ–¥–æ–±—Ä–µ–Ω–∞!**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{request['marzban_username']}`\n"
                f"üìã –ü–ª–∞–Ω: {plan.name}\n"
                f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {plan.duration_days} –¥–Ω–µ–π\n"
                f"üí∞ –°—É–º–º–∞: {plan.price} —Ä—É–±.",
                parse_mode='Markdown',
                reply_markup=self._main_menu_markup()
            )
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {request['marzban_username']}\n"
                f"–ó–∞—è–≤–∫–∞ #{request_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω–∞—è, –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø—Ä–æ–¥–ª–µ–Ω–∞."
            )

    async def reject_payment_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–æ–º"""
        if not await self.require_admin(update):
            return
        
        if len(context.args) < 2:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/reject request_id –ø—Ä–∏—á–∏–Ω–∞`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/reject 123 –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –Ω–∞ —á–µ–∫–µ`",
                parse_mode='Markdown'
            )
            return
        
        try:
            request_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏.")
            return
        
        reason = " ".join(context.args[1:])
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = self.db.get_payment_request(request_id)
        if not request:
            await update.message.reply_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        if request['status'] != 'pending':
            await update.message.reply_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{request_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            return
        
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
        success = self.db.reject_payment_request(request_id, update.effective_user.id, reason)
        if not success:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{request_id}.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        plan = next((p for p in PLANS if str(p.id) == str(request['plan_id'])), None)
        plan_name = plan.name if plan else f"–ü–ª–∞–Ω #{request['plan_id']}"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_message = f"‚ùå **–ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê**\n\n"
            user_message += f"üÜî –ó–∞—è–≤–∫–∞ #{request_id}\n"
            user_message += f"üìã –ü–ª–∞–Ω: {plan_name}\n"
            user_message += f"üí∞ –°—É–º–º–∞: {request['amount']} —Ä—É–±.\n\n"
            user_message += f"‚ùóÔ∏è –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {reason}\n\n"
            user_message += f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É."
            
            await context.bot.send_message(
                chat_id=request['telegram_id'],
                text=user_message,
                parse_mode='Markdown'
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request['marzban_username']}: {e}")
        
        await update.message.reply_text(
            f"‚ùå **–ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{request['marzban_username']}`\n"
            f"üí¨ –ü—Ä–∏—á–∏–Ω–∞: {reason}",
            parse_mode='Markdown'
        )
    
    def _main_menu_markup(self):
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])