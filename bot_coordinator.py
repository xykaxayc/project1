import logging
from telegram import Update
from telegram.ext import ContextTypes
from texts import get_text

from handlers import (
    UserHandlers, 
    AdminHandlers, 
    PaymentHandlers, 
    SubscriptionHandlers, 
    RegistrationHandlers
)
from database_manager import DatabaseManager
from marzban_api import MarzbanAPI

logger = logging.getLogger(__name__)

class BotCoordinator:
    """–ì–ª–∞–≤–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    
    def __init__(self, db_manager: DatabaseManager, marzban_api: MarzbanAPI):
        self.db = db_manager
        self.marzban = marzban_api
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.user_handlers = UserHandlers(db_manager, marzban_api)
        self.admin_handlers = AdminHandlers(db_manager, marzban_api)
        self.payment_handlers = PaymentHandlers(db_manager, marzban_api)
        self.subscription_handlers = SubscriptionHandlers(db_manager, marzban_api)
        self.registration_handlers = RegistrationHandlers(db_manager, marzban_api)
    
    # ========== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ==========
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        return await self.user_handlers.start_command(update, context)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        return await self.user_handlers.status_command(update, context)
    
    async def my_id_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /my_id"""
        return await self.user_handlers.my_id_command(update, context)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        return await self.user_handlers.help_command(update, context)
    
    async def my_accounts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /my_accounts ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.user_handlers.my_accounts_command(update, context)
    
    async def choose_account_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        return await self.user_handlers.choose_account_command(update, context)
    
    # ========== –ü–û–î–ü–ò–°–ö–ò ==========
    
    async def subscription_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        return await self.subscription_handlers.get_user_subscription_command(update, context)
    
    async def test_subscription_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏"""
        return await self.subscription_handlers.test_subscription_command(update, context)
    
    async def fix_subscription_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏"""
        return await self.subscription_handlers.fix_subscription_urls_command(update, context)
    
    async def diagnose_subscription_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
        return await self.subscription_handlers.diagnose_subscription_command(update, context)
    
    async def quick_fix_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏"""
        return await self.subscription_handlers.quick_fix_command(update, context)
    
    # ========== –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
    
    async def admin_links_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏"""
        return await self.admin_handlers.admin_links_command(update, context)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return await self.admin_handlers.stats_command(update, context)
    
    async def user_info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        return await self.admin_handlers.user_info_command(update, context)
    
    async def pending_payments_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
        return await self.admin_handlers.pending_payments_command(update, context)
    
    async def new_users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return await self.admin_handlers.new_users_command(update, context)
    
    async def delete_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.admin_handlers.delete_user_command(update, context)
    
    async def cleanup_accounts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        return await self.admin_handlers.cleanup_accounts_command(update, context)
    
    # ========== –ü–õ–ê–¢–ï–ñ–ò ==========
    
    async def confirm_payment_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
        return await self.payment_handlers.confirm_payment_command(update, context)
    
    async def approve_payment_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
        return await self.payment_handlers.approve_payment_command(update, context)
    
    async def reject_payment_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
        return await self.payment_handlers.reject_payment_command(update, context)
    
    # ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –§–ê–ô–õ–û–í –ò –°–û–û–ë–©–ï–ù–ò–ô ==========
    
    async def handle_receipt_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–æ–≤"""
        return await self.payment_handlers.handle_receipt_upload(update, context)
    
    async def handle_text_messages(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é
        if update.message and update.message.text:
            # –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é
            menu_buttons = [
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", "üîó –°—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏", 
                "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "‚ÑπÔ∏è –ü–æ–º–æ—â—å",
                "üÜï –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", 
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üí∞ –û–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏",
                "üîó –°—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏", "üîß –ö–æ–º–∞–Ω–¥—ã", "‚óÄÔ∏è –ù–∞–∑–∞–¥"
            ]
            
            if update.message.text in menu_buttons:
                return await self.user_handlers.handle_reply_keyboard(update, context)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        return await self.registration_handlers.handle_text_messages(update, context)
    
    # ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–õ–ë–≠–ö–û–í ==========
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–æ–ª–±—ç–∫–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        telegram_id = query.from_user.id
        
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∏
            if data == "main_menu":
                return await self.user_handlers.main_menu_callback(query, telegram_id)
            
            elif data == "support":
                return await self.user_handlers.support_callback(query)
            
            elif data == "download_app":
                return await self.user_handlers.download_app_callback(query)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
            elif data == "register_new":
                return await self.registration_handlers.start_registration_callback(query, context)
            
            elif data == "link_existing":
                return await self.registration_handlers.link_existing_callback(query)
            
            # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            elif data == "status":
                user = await self.user_handlers.get_verified_user(telegram_id)
                if not user:
                    await query.edit_message_text(get_text("messages/ACCOUNT_NOT_LINKED"))
                    return
                return await self.user_handlers._show_user_status(query.message, user['marzban_username'], edit_message=True)
            
            # –ü–æ–¥–ø–∏—Å–∫–∏
            elif data.startswith("get_subscription_"):
                username = data.replace("get_subscription_", "")
                return await self.subscription_handlers.handle_subscription_callback(query, username)
            
            elif data.startswith("test_sub_"):
                username = data.replace("test_sub_", "")
                return await self.subscription_handlers.test_subscription_callback(query, username)
            
            # –ü–ª–∞—Ç–µ–∂–∏
            elif data == "payment":
                return await self.payment_handlers.show_payment_accounts(query)
            
            elif data.startswith("payacc_"):
                marzban_username = data.replace("payacc_", "")
                return await self.payment_handlers.show_payment_plans_for_account(query, marzban_username)
            
            elif data.startswith("plan_"):
                # plan_{id}_{username}
                parts = data.split("_")
                if len(parts) == 3:
                    plan_id = parts[1]
                    marzban_username = parts[2]
                    return await self.payment_handlers.process_payment_plan(query, plan_id, marzban_username)
                else:
                    # —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–±–µ–∑ username)
                    plan_id = data.replace("plan_", "")
                    return await self.payment_handlers.process_payment_plan(query, plan_id)
            
            elif data.startswith("paid_"):
                # paid_{plan_id}_{username} –∏–ª–∏ paid_{plan_id}
                parts = data.split("_")
                if len(parts) == 3:
                    plan_id = parts[1]
                    marzban_username = parts[2]
                    accounts = self.user_handlers.db.get_users_by_telegram_id(telegram_id)
                    user = next((u for u in accounts if u['marzban_username'] == marzban_username), None)
                    if not user:
                        await query.edit_message_text(get_text("messages/USER_NOT_FOUND"))
                        return
                    return await self.payment_handlers.handle_payment_claim(query, plan_id, user, context)
                else:
                    plan_id = data.replace("paid_", "")
                    user = await self.user_handlers.get_verified_user(telegram_id)
                    if not user:
                        await query.edit_message_text(get_text("messages/USER_NOT_FOUND"))
                        return
                    return await self.payment_handlers.handle_payment_claim(query, plan_id, user, context)
            
            elif data.startswith("set_active_account_"):
                return await self.user_handlers.set_active_account_callback(query, context)
            
            elif data == "my_accounts":
                return await self.user_handlers.my_accounts_command(query, context)
            
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–ª–±—ç–∫: {data}")
                await query.answer(get_text("messages/UNKNOWN_CALLBACK"))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞ {data}: {e}")
            await query.answer(get_text("messages/GENERIC_ERROR"))
    
    # ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ==========
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
        if update and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    get_text("messages/GENERIC_ERROR_REPLY")
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
        else:
            logger.warning("Update –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç effective_message")